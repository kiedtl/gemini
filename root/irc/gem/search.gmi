#!/usr/bin/env lua
--
-- (c) KiÃ«d Llaentenn <kiedtl@tilde.team>
-- See the COPYING file for copyright information.

local lib = require('lib')

local DATE_PAT = "%d%d%d%d%-%d%d%-%d%d"
local DATETIME_PAT = "%d%d%d%d%-%d%d%-%d%dT%d%d:%d%d:%d%dZ"
local USERNICK_PAT = "^([%w%-_%[%]{}%^`%|]+)$"

local width = 60
local scoop_path = "/home/kiedtl/pub/gemini/src/gemlogs/scoop"
local db_path = "/home/kiedtl/pub/gemini/root/irc/gem/logs.db"

function decode_url(url)
	local function _(h) return string.char(tonumber(h, 16)) end
	return url:gsub("%%(%x%x)", _)
end

function parse_query_error(msg, txt)
	lib.printf("20 text/gemini; lang=en\r\n")
	lib.printf("# Search syntax error\n\n")
	if msg then lib.printf("%s\n", msg) end
	if txt then lib.printf("%s\n", txt) end
	os.exit(0)
end

function parse_query(query)
	query = decode_url(query)

	local cmd = scoop_path .. " -firc -d '" .. db_path .. "'"
	local filter_info = "Options:\n"

	local function cmd_append(flag, val) cmd = cmd .. " -" .. flag .. " '" .. val .. "'" end
	local function info_append(...) filter_info = filter_info .. "* " .. string.format(...) .. "\n" end

	for k, v in query:gmatch(":(%w-)=([^%s]+)%s?") do
		if k == 'after' or k == 'before' then
			if not v:find(DATETIME_PAT) and not v:find(DATE_PAT) then
				parse_query_error("Invalid date/time: " .. val)
			end

			v = v:gsub("T", " ")
			v = v:gsub("Z", "")

			if k == 'after' then
				cmd_append("a", v)
				info_append("Matching events after %s", v)
			elseif k == 'before' then
				cmd_append("b", v)
				info_append("Matching events before %s", v)
			end
		elseif k == 'date' then
			if not v:find(DATE_PAT) then
				parse_query_error("Invalid date: " .. val)
			end
			cmd_append("D", v)
			info_append("Matching events on %s", v)
		elseif k == 'event' then
			cmd_append("t", v)
			info_append("Matching events of type %s", v)
		elseif k == 'host' then
			cmd_append("h", v)
			info_append("Only showing users with a hostname of %s", v)
		elseif k == 'limit' then
			if not v:find("^[0-9]+$") then
				parse_query_error("Invalid results limit: " .. val)
			end

			cmd_append("l", v)
			info_append("Retrieving a maximum of %d results", v)
		elseif k == 'nick' or k == 'user' then
			if not v:find(USERNICK_PAT) then
				parse_query_error("Invalid nick/user: " .. val)
			end

			if k == 'nick' then
				cmd_append("n", v)
				info_append("Only showing nicknames that match %s", v)
			elseif k == 'user' then
				cmd_append("u", v)
				info_append("Only showing events from user %s", v)
			end
		elseif k == 'width' then
			-- only assign width if width is a valid integer; if not,
			-- just leave it to use the default value.
			if v:find("^[0-9]+$") then
				width = tonumber(v)
				info_append("Wrapping messages at %d characters", v)
			end
		end

		-- remove the processed portion.
		query = query:gsub(":%w-=[^%s]+%s?", "")
	end

	-- now, query contains the search text.
	if query and not (query == "") then
		cmd = cmd .. " '" .. query .. "'"
		info_append("Searching for '%s'", query)
	end

	return cmd, filter_info
end

local query = os.getenv("QUERY_STRING")
if not query then
        io.write("10 Search query:\r\n")
        os.exit(0)
end

local cmd, info = parse_query(query)
local scoop = assert(io.popen(cmd, 'r'))
local out = assert(scoop:read('a'))

io.write("20 text/gemini; lang=en\r\n")
io.write("# #gemini IRC logs\n\n" .. info)

lib.begin_process_messages()
for line in string.gmatch(out, "(.-\n)") do
	lib.process_message(line, width)
end
lib.end_process_messages()

scoop:close()
